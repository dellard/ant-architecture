#!/usr/bin/env wish -f
# $Id: gad_dbg.tcl,v 1.3 2001/01/02 15:30:06 ellard Exp $
#
# Copyright 2000-2001 by the President and Fellows of Harvard College.
# See LICENSE.txt for license information.


# Function descriptions:

# Sets up the ANT for execution.  Should be called first, before any
# other functions are called.

proc gantInitialize {} {}

# Assembles the given str.  Returns "OK" if the assembly was
# successful, "ERROR" otherwise.  Leaves the state of the ANT
# untouched!  After the assembly is finished, LoadFromAssembler can be
# used to copy the newly assembled instructions into the current ANT.

proc gantAssemble { str } { return OK }

# Returns the last error string generated by the assembler or related
# tools.

proc gantGetAntErrorStr { } { return "No Error" }

# Loads the contents of ant_filename into the current ANT. 
# ant_filename must be a .ant file.  Returns "ERROR" if there is an
# error, OK otherwise.  The ANT should not be executed if there is any
# error.

proc gantLoadFromFile { ant_filename } { return OK }

# If the last run of the assembler was successful, resets the ANT and
# then loads the last assembled data, and returns OK.  Otherwise,
# returns ERROR.  The asm_filename parameter is used to specify the
# name of the source of the original asm-- which could be a file name,
# or something like "EDITOR".

proc gantLoadFromAssembler { asm_filename } { return OK }

# Returns the number of instructions in the instruction memory area of
# the current ANT.  The results are meaningless (or disasterous) if
# the current ANT has not been loaded successfully.

proc gantGetInstCount { } { return 10 }

# Execute the next instruction.  Returns the status of the processor
# after the instruction is executed.

proc gantExecSingleStep { } { }

#

proc gantGetArgc { } { return 2 }
proc gantGetArgvElem { index } {

	if { $index == 0 } {
		return "../aide"
	}
	if { $index == 1 } {
		return "foo.asm"
	}
}

proc gantDisasmInst { } { return "0x00:  inst flubber!" }

proc gantDisasmData { } { return "0x00:  data blubber!" }

proc gantGetReg { r } { return "$r hex binary ascii" }

proc gantGetPC { } { return "0" }

proc gantGetInst { r } { return "0x00:  inst blah" }

proc gantGetBreakPoints { } { }

proc gantGetBreakPoint { } { }

proc gantToggleBreakPoint { n } { }

proc gantGetStatus { } { }

proc gantGetInstSrc { n } { return 3 }

proc gantLatchIO { w s } { }

proc gantSetBreakPoint { } { }

proc gantGetLabels { } { }

source ide.tcl

