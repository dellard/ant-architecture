#!/usr/bin/perl
# $Id: aa32-test,v 1.1 2001/03/18 02:31:08 ellard Exp $
#
# aa32-test -- A perl script for doing some tests for ANT assembler
# compatibility.
#
# Based on test-ant by James Megquier (jmegq@post.harvard.edu) (but
# NOT based on test-aa, a very different program, also written by
# James Megquier.)
#
# The "program" is NOT the ant32 asm file that you want to test, it's
# the name of the ant32 assembler that you want to test.  This program
# then fires up this aa32, feeds it a bunch of programs, and compares
# the output with "known" outputs.

###
# Constants
###

# Who ya gonna call?
$Curator	= "ant-devel\@eecs.harvard.edu";

# Working directory for testing
$MyTestDir	= "aa32-out";

# Where to put the results
$OutputFile	= "$MyTestDir/log";

# Official test repository
# $OfficialTestDir="aa32";
$OfficialTestDir="/home/lair/ant/Tests/3.1/Ant32/aa32";

($OfficialTestDir = "."), warn("\n\nDEBUG - using local test dir\n\n")
	if ($ENV{'DEBUG_TEST_ANT'});

# List of test subsystems
# The "all" option runs all of these tests in order.
#
@AllTests  = qw( basic );

$AllOption = "all";

# Sanity check: verify that all tests actually exist
foreach $test (@AllTests) {
	my $dir = $OfficialTestDir.'/'.$test;
	unless ( -d $dir ) {
		&flame("Strange, I can't seem to find the test [$test] in $dir");
	}
	unless ( -r $dir ) {
		&flame("Strange, test [$test] is unreadable ($dir)");
	}
	unless ( -x $dir ) {
		&flame("Strange, test [$test] is not executable ($dir)");
	}
}

# Get the program name
($ProgName = $0) =~ s%.*/%%;

# Get ourselves a new process group, so
# that we might control our own subprocesses
setpgrp 0, $$;

# I'm the leader of this pgrp
$main_pid = $$;

# Unbuffer stdout
$|=1;

# Assume verbose output
$verbose = 1;

# Cutoff for runaway subprocs
$runawayTime = 5;

###
# Usage
###

# undocumented flag: --quiet makes quieter output

sub usage {
	(warn "\n",@_,"\n\n") if @_;
	print <<EOM;
usage: $ProgName [[+suite] [-suite] ... ] aa32

     +suite       add "suite" to the list of test suites to run
     -suite       remove "suite" from the list of test suites to run

  Available test suites are:
EOM
	my $test;
    foreach $test (@AllTests) {
		print "      $test\n";
	}
	    print "      $AllOption (performs all tests)\n";
	print "\n";

	print "Example: $ProgName +$AllOption ./aa32\n";
	
	print "\n";
	exit(1);
}

###
### Initialization
###
#
# Argument parsing
#

# Bail if no args
&usage() unless (@ARGV > 0);

# Grab the name of the aa32 to test
$AaToTest = pop @ARGV;

# Check aa32-to-test
unless (-x $AaToTest) {
# if doesn't exist and starts with a -, it's probably a switch
	if ($AaToTest =~ /^-/) {
		&usage("No program was specified to test");
	} else {
		&usage("Program [$AaToTest] not found?");
	}
}

while (@ARGV > 0) {
	$_ = shift;
	if ($_ eq '--quiet') {
		$verbose = 0;
	} elsif (/([+-])(\w+)/) {
		my $add = ($1 eq '+');
		my $suite = $2;
		if ($suite eq $AllOption) {
			@testList = $add ? @AllTests : ();
		} elsif (grep {$_ eq $suite} @AllTests) {
			if ($add) {
				# Add the test, if unique
				unless (grep {$_ eq $suite} @testList) {
					push @testList, $suite;
				}
			} else {
				# Remove the mentioned test
				@testList = grep {$_ ne $suite} @testList;
			}
		} else {
			&usage("Unknown test suite [$suite]")
		}
	} else {
		&usage("Unrecognized option [$_]");
	}
}

unless (@testList) {
	&usage("You must specify at least one test suite to run.");
}

# If in quiet mode, let the users know where the output is going.
print "Writing output to $OutputFile...\n" if (! $verbose);

#
# Create output file
#
unless (-d $MyTestDir) {
	mkdir($MyTestDir,0777) || &fatal("Some problem creating $MyTestDir.");
}

if (-e $OutputFile) {
	unlink($OutputFile) || &fatal("Some problem removing $OutputFile.");
}

open(OUT, ">$OutputFile") || &fatal("Some problem creating $OutputFile.");

# Unbuffer OUT
select((select(OUT), $|=1)[0]);

$num_pass  = 0;
$num_fail  = 0;
$num_nocore= 0;
undef(@failures);

###
### Run the tests
###

foreach $suite (@testList) {

	# Tell them what kinds of tests we're doing
	&output("\n#####\n##### $suite suite started\n#####\n\n");

	(-d "$MyTestDir/$suite") or mkdir("$MyTestDir/$suite",0777);

	@tests = &getTests($suite);

	foreach $t (@tests) {
		$test = $suite.'/'.$t;
		$num_total++;

		&output("### - - - - - $test - - - - - ###\n");

		$shared = "$OfficialTestDir/$test";
		$local  = "$MyTestDir/$test";

		$ref_asm = $shared.".asm";
		$ref_out = $shared.".out";
		$ref_ant = $shared.".ant";

		$loc_asm = $local.".asm";
		$loc_out = $local.".out";
		$loc_ant = $local.".ant";

		if (-e $loc_asm) {
			unlink ($loc_asm) || &fatal ("Can't copy [$loc_asm]\n");
		}
		`cp $ref_asm $loc_asm`;
		if (! -e $loc_asm) {
			&fatal ("Can't create [$loc_asm]\n");
		}

		# Print the description comments (those beginning with #@)
		&output(`grep "^#@" $loc_asm`);

		# &&& need to test
		unlink ($loc_out);
		unlink ($loc_ant);

		# Run the test
		&output(&infRun("$AaToTest $loc_asm | sed -e 's/^.*\\/\\([^:/]*\\):/\\1:/' | tee $loc_out", $test));

		if (-e $loc_ant && -e $ref_ant) {
			if (&pass_aa($loc_ant,$ref_ant,$loc_out,$ref_out) == 1) {
			# it passed
				$num_pass++;
			} else {
			# it failed
				push(@failures,$test);
				&output("\n$test FAILED\n");
				$num_fail++;
			}
		} elsif (! -e $loc_ant && ! -e $ref_ant) {
			if (&pass_aa("/dev/null","/dev/null",$loc_out,$ref_out) == 1) {
			# it passed
				$num_pass++;
			} else {
			# it failed
				push(@failures,$test);
				&output("\n$test FAILED\n");
				$num_fail++;
			}
		} elsif (-e $loc_ant && ! -e $ref_ant) {
			push (@failures,$test);
			$num_fail++;
			&output("$test should NOT have produced output.\n");
			&output("\n$test FAILED\n");
		} elsif (! -e $loc_ant && -e $ref_ant) {
			push (@failures,$test);
			$num_fail++;
			&output("$test should have produced output.\n");
			&output("\n$test FAILED\n");
		}
	}
}

###
### Summary at the end
###
&output("\n");
&output("################\n");
&output("Summary of tests\n");
&output("################\n");
&output("\n");

&output("Failed: $num_fail\n");
&output("NoCore: $num_nocore\n");
&output("Passed: $num_pass\n");
&output(" Total: $num_total\n");

&output("\n");

if (@failures) {
	&foutput("The following tests failed:\n");
	foreach $fail (@failures) {
		&foutput("    $fail\n");
	}
} elsif ($num_pass == $num_total) {
	&foutput("All $num_total attempted tests passed!\n");
} else {
	&foutput("Some errors occurred during testing\n",
			"Please notify $Curator.\n");
}

&output("\n");
&output("$ProgName finished.\n");

close(OUT);

if ($num_fail > 0) {
	exit(1);
}
else {
	exit(0);
}

################################################
###
### Subroutines
###
sub fatal {
	die @_,"\n";
}

sub flame {
	&fatal("\n",@_,"\nPlease notify $Curator\n");
}

# foutput is just forced-output (doesn't care about verbose)
sub foutput {
	print OUT @_;
	print @_;
}

# output the args to the log file, and to screen if verbose
sub output {
	print OUT @_;
	print @_ if ($verbose);
}

# getTests returns a list of all the test names, minus extensions
sub getTests {
	opendir(DIR, "$OfficialTestDir/$_[0]")
		or &fatal("Hmm, can't open suite $_[0]\n");
	my @result = grep { /\.asm$/ } readdir(DIR);
	closedir DIR;
	map { s/\.asm$// } @result;
	return sort @result;
}

# compare the test ant to the solution set
sub pass_aa {
	my($my_ant, $ref_ant, $my_out, $ref_out) = @_;

	my $passed  = 1;

	my @diffs = `diff $my_ant $ref_ant`;
	if (@diffs) {
		&output("\n$test INCORRECT ASSEMBLY:\n");
		&output(@diffs);
		$passed = 0;
	}

	my @diffs = `diff $my_out $ref_out`;
	if (@diffs) {
		&output("\n$test INCORRECT OUTPUT:\n");
		&output(@diffs);
		$passed = 0;
	}

	return $passed;
}

# infRun(cmd)
#
# Protects cmd from running away by killing it off after awhile.
# Returns the lines of output it managed to get.
#
sub infRun {
	local $cmd = $_[0];
	local $test = $_[1];
	local @lines;

	open SAVERR, ">&STDERR";
	open STDERR, ">&STDOUT";

	unlink 'core';
	eval {
		local $SIG{ALRM} = sub {
			# Kill everyone but me!  A real hack.
			local @goners = `ps -j`;
			local $_;
			foreach $_ (@goners) {
				local($pid, $pgid) = /^\s*\w+\s+(\d+)\s+\d+\s+(\d+)\s+/;
				if ($pgid == $main_pid && $pid != $pgid) {
					system "kill -9 $pid";
				}
			}
			die "$ProgName: $test timed out!\n";
		};
		alarm $runawayTime;
		@lines = `$cmd`;
		alarm 0;
	};

	$lines[0] = $@ unless (@lines > 0);

	close STDERR;
	open STDERR, ">&SAVERR";

	if (-e 'core') {
		push @lines, "$ProgName: $test caused real core dump!\n";
		unlink 'core';
	}

	return @lines;
}

#
# EOF
#
